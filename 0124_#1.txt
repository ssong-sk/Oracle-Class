
--부서별 급여
select * from emp;
select deptno 급여, max(sal) from emp group by deptno;

--부서별 가장급여를 많이 받는사람  순서(where -> group  by ->  havig절 -> order by 정렬
select deptno,ename,sal from emp where sal in (select max(sal) from emp group by deptno) order by deptno;

--입사년도별 입사년도,인원수,평균급여 (입사년도의 오름차순)
select to_char(hiredate,'YYYY') 입사년도, count(*) 인원수, round(avg(sal),2) 평균급여 
from emp 
group by to_char(hiredate,'YYYY') order by to_char(hiredate,'YYYY') asc;

--[RollUp함수]
--자동으로 소계/합계를 구해주는 함수 group by 절에 주어진 조건으로 소계값을 구해준다
select deptno 부서번호, position 직위, sum(pay) 총급여
from professor
group by position,rollup(deptno); --position을 먼저 적었으니 실행하면 제일 하단에 position별로 총 소계 합계가 나옴

select deptno 부서번호, position 직위, sum(pay) 총급여
from professor
group by deptno,rollup(position); --deptno을 먼저 적었으니 실행하면 제일 하단에 deptno부서번호별로 총 소계 합계가 나옴

-- 간단하게 rollup만 이용해서도 출력가능
select position, count(*), sum(pay)
from professor
group by rollup(position);

--[Cube함수] - 전체 총 합계까지 출력하려면 cube
select deptno 부서번호, count(*) 인원수, sum(pay) 총급여
from professor
group by cube(deptno);    --2개보다 1개를 조회하는게 명확 > detail 하게 조회할때는 2개 조회

-- cube 함수를 이용하여 부서번호별 총 합계와 교수별 총합계까지 구하기 ↑ 위에 적은 2개조회방법
select deptno 부서번호,position 직위, count(*) 인원수, sum(pay) 총급여
from professor
group by cube(deptno,position);  

--Q.연봉이 2000 이상인 부서의 부서번호와 평균급여를 구하시오
select deptno 부서번호, round(avg(sal),2) 평균급여
from emp
group by deptno
having round(avg(sal),2) >= 2000
order by deptno asc; --asc 생략가능 오름차순 , 정렬은 맨마지막에 나옴

--직군별 직원수를 구하는데 , 2명이상인 경우만 조회  -> where 절의 조건을 넣으면 그중에서 deptno 부서번호가 10,20일경우
select job 직군, count(*) cnt
from emp
where deptno in('10','20','30')  -- select -> from -> where -> group by -> having -> order by 순서 유의
group by job
having count(*) > 2;

---------------------------------------------------------------------------------------------------------------------------------------

--Q.emp에서 deptno가 10,20,30번중에서 부서번호가 20인 직군의 부서갯수를 구하시오
select job 직군, deptno 부서번호, count(*) 갯수 
from emp
where deptno in (10,20,30) --전체이므로 생략해도 무방
group by job,deptno
having deptno = 20;

--Q.emp에서 직군별로 직군,급여합계 (Manager 직군만 제외)를 구하되 급여합계가 5000이상만 구해서 급여가 높은순으로 정렬하시오
select job 직군, sum(sal) "급여 합계" -- 급여 합계 띄어쓰려면 ""붙이기
from emp
where job not in('MANAGER') -- not in 사용 MANAGER제외한것
group by job  --직군별로 그룹
having sum(sal) >= 5000  --급여합계가 5000이상
order by sum(sal) desc;  --급여합계 내림차순

--------------------------------------------------------------------------------------------------------------------------------------------------------

--제약조건 주어서 새로운 테이블 생성
create table sawon(num number(5) CONSTRAINT sawon_pk_num primary key,
name varchar2(20),
gender varchar2(10),
buseo varchar2(30) constraint sawon_ck_buseo check (buseo in ('개발부', '인사부', '교육부')),
pay number(10) default 1200000);

--시퀀스
create sequence seq_sawon;

--insert 10개 정도
--check(체약 조건에 어긋나므로 아래와 같은 오류가 발생한다. insert각자 할것!!!!/ 홍보부는 부서에 없기 떄문)
insert into sawon values(seq_sawon.nextval,'이준기','남자','홍보부',345000000);

insert into sawon values(seq_sawon.nextval,'이준기','남자','개발부',345000000);
insert into sawon values(seq_sawon.nextval,'유재석','남자','인사부',330000000);
insert into sawon values(seq_sawon.nextval,'송지효','여자','교육부',285000000);
insert into sawon values(seq_sawon.nextval,'강동원','남자','개발부',385000000);
insert into sawon values(seq_sawon.nextval,'김태희','여자','인사부',239400000);
insert into sawon values(seq_sawon.nextval,'이민기','남자','교육부',545000000);
insert into sawon values(seq_sawon.nextval,'지창욱','남자','교육부',285000000);
insert into sawon values(seq_sawon.nextval,'신혜선','여자','개발부',254000000);
insert into sawon values(seq_sawon.nextval,'신세경','여자','인사부',220000000);
insert into sawon values(seq_sawon.nextval,'전지현','여자','개발부',350000000);


--최종저장
commit;

--그룹함수 사용해서 테스트
--부서별 인원수와 최고급여 최저급여를 조회
select buseo 부서명, count(*) 인원수, max(pay) 최고급여, min(pay) 최저급여
from sawon
group by buseo;

--위의 쿼리문에 최고급여 최저급여에 화폐단위 붙이고 3자리컴마도 나오게 해주시오.
select buseo 부서명, count(*) 인원수,to_char (max(pay), 'l999,999,999') 최고급여, to_char(min(pay), 'l999,999,999') 최저급여
from sawon
group by buseo;

--부서별 인원수와 평균 급여를 출력하시dh. 제목은 부서명, 인원수, 평균 급여라고 출력하시오.(인원뒤에 명이라고 붙일것!)
select buseo 부서명, count(buseo)||'명' 인원수, to_char(avg(pay),'l999,999,999') "평균 급여"
from sawon
group by buseo;

--성별 인원수와 평균급여, 최고급여, 최저시급을 구하시오.
select gender 성별, count(gender) 인원수, avg(pay) 평균급여, max(pay) 최고급여, min(pay) 최조급여
from sawon
group by gender;

--부서명 그룹중에서 부서별 인원이 4명 이상인경우만 출력(부서명, 인원수, 평균급여)
select buseo 부서명, count(buseo) 인원수, avg(pay) 평균급여
from sawon
group by buseo
having count(buseo) >=4;

--제약조건 제거하기
--sawon 테이블의 sawon _ ck _ buseo 를 제거해보자
alter table sawon drop constraint sawon_ck_buseo;

--제거했으므로 다른 부서도 insert 해보기
insert into sawon values(seq_sawon.nextval, '김종국','남자','해외영업부',5800000);

--sawon에 name컬럼에 unique제약조건추가하기 (sawon_uk_name)
--unique는 not null과 다르게 컬럼명을 다시한번 더 명시해 주어야 한다. unique(name)
--중복조건으로 이름이 같은 사람은 넣지못하게 제약을 걸음.
alter table sawon add constraint sawon_uk_name unique(name);

select * from sawon;

-----------------------------------------------------------------------------------------------------------------------------
--조인(join)

--emp와 dept 조인해서 emp사원의 이름과 부서명을 조회하시오.
--smith research dallas

--방법1
select e.ename 사원명, d.dname 부서명 , d.loc 부서지역
from emp e, dept d
where e.deptno = d.deptno;

--방법2
select emp.ename 사원명, dept.dname 부서명, dept.loc 부서위치
from emp, dept
where emp.deptno = dept.deptno;

--방법3
select ename 사원명, dname 부서명, loc 부서위치
from emp e, dept d
where e.deptno = d.deptno;

select * from emp;
select * from dept;

--Q. PROfessor department를 조인하여 다음과 같이 출력하시오.
--교수명, 학과명
--방법1
select p.name 교수명, d.dname 학과명
from professor p, department d
where p.deptno = d.deptno;

--Q.emp, dept를 이용하여 부서번호가 10번인 부서의 사원들 중 사원명, 부서명, 급여를 조회하시오.
select ename, dname, sal
from emp e, dept d
where e.deptno = d.deptno 
and  d.deptno = '10';


select * from professor;
select * from department;


--Q.student professor를 이용하여 다음과 같이 출력하시오.
-- 학번  학생명  담당교수
select studno 학생, s.name 학생명, p.name 교수명
from student s, professor p
where s.profno = p.profno;

--Q. panmae,product를 이용하여 다음과 같이 출력하시오.
--새우깡 총판매가격(p_total)
select p_name 상품명,p_price 제품가격, p_qty 제품재고량, p_total 총가격
from panmae pan,product pro
where pan.p_code = pro.p_code;

--Q.student department를 이용하여 다음과 같이 출력하시오.
select name 학생명, dname 제1전공
from student s, department d
where s.deptno1 = d.deptno;

------------------------------------------------------------------------------------------------------------


--비정규화 된 테이블
--회사, 직원 테이블 : companysawon
--회사원 company 문자열(20)
--회사주소 : address 문자열(30)
--회사전화 : phone 문자열(20)
--직원명 : sawon_name 문자열(20)
--직급 : position 문자열(20)
--이메일 : email 문자열(20)
--휴대폰 : hp 문자열(20)

----------------------------------------------------------
--테이블 만들기
create table companysawon (company varchar2(20), address varchar2(30), phone varchar2(20), sawon_name varchar2(20), position varchar2(20), email varchar2(20), hp varchar2(20));

--안에 내용 넣기
insert into companysawon values ('삼성', '서울시 강남구', '02-222-1234', '홍길동', '과장', 'hong@gmail.com', '010-3333-1234');
insert into companysawon values ('LG', '서울시 용산구', '02-333-1234', '유재석', '상무', 'yoo@gmail.com', '010-3333-9999');
insert into companysawon values ('현대', '서울시 종로구', '02-333-5845', '강호동', '사원', 'kang@gmail.com', '010-4555-1234');

select * from companysawon;

--거래처 회사에 대한 정보를 거래처 직원을 내가 추가할 때 마다 모두 추가해야한다....즉 메모리 낭비가 심하다
--회사를 이전 하거나 아니면 직급이 바뀌면 많은 데이터를 한번에 모두 수정해야하므로 정말 번거롭다.
--그래서 DB정규화가 필요하다. DB정규화란? 거래처, 회사정보 따로 직원정보 따로 분리해서 만드는것, -> 각 각의 정보를 분리해서 만드는것.

--정규화 디자인 
--회사 아이디 넣기 : company_id 숫자(5) 기본키
--회사명 : company 문자열 (20)
--회사주소 : address : 문자열(30)
--회사전화  : phone : 문자열(20)

--테이블 컴파니 생성하기
create table company(company_id number(5) primary key,
company varchar2(20), address varchar2(30), phone varchar2(20));

--데이터 추가
insert into company values(10, 'LG', '서울시 서초구', '02-3944-3333');
insert into company values(20, '현대', '경기도 용인시', '031-3333-3944');
insert into company values(30, '삼성', '서울시 강남구', '02-4344-4444');



--거래처 직원 데이틀 : C_SAWON
--정규화 디자인 
--회사 아이디 넣기 : company_id 숫자(5) 기본키
--회사명 : company 문자열 (20)
--회사주소 : address : 문자열(30)
--회사전화  : phone : 문자열(20)
--회사아이디 : company_id number(5) :외부키(foreign key)

--외부키와 연결
create table c_sawon(company_id number(5),
sawon_name varchar2(20), position varchar2(20),
email varchar2(20), hp varchar2(20),
CONSTRAINT c_sawon_fk_id foreign key (company_id) references company(company_id));

insert into c_sawon values(10, '이성일', '과장', 'lee@naver.com','010-111-4444');
insert into c_sawon values(20, '하동훈', '부장', 'ha@naver.com','010-555-4444');
insert into c_sawon values(30, '양세찬', '대리', 'yang@naver.com','010-123-5555');

--company와 관계되어진 테이브 (c_sawon)에서 10, 20번을 추가하였다.
--20번 현대 를 지워보다
delete from company where company_id = 20;

--30번 삭제...연결된 자식글이 없으므로 삭제에서 자유롭다.
delete from c_sawon where company_id = 30;

--밑에서 먼저 해당 번호를 삭제해야지 위 테이블이 삭제가됨....
delete from company where company_id = 30; 

select * from company;